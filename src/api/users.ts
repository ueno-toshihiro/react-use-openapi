/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * User API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  User
} from './users.schemas'



/**
 * @summary Get all users
 */
export const listUsers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User[]>> => {
    
    return axios.get(
      `http://localhost:3000/users`,options
    );
  }


export const getListUsersQueryKey = () => {
    return [`http://localhost:3000/users`] as const;
    }

    
export const getListUsersQueryOptions = <TData = Awaited<ReturnType<typeof listUsers>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({ signal }) => listUsers({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type ListUsersQueryResult = NonNullable<Awaited<ReturnType<typeof listUsers>>>
export type ListUsersQueryError = AxiosError<unknown>

/**
 * @summary Get all users
 */
export const useListUsers = <TData = Awaited<ReturnType<typeof listUsers>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getListUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new user
 */
export const createUser = (
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.post(
      `http://localhost:3000/users`,
      user,options
    );
  }



export const getCreateUserMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = User
    export type CreateUserMutationError = AxiosError<unknown>

    /**
 * @summary Create a new user
 */
export const useCreateUser = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createUser>>,
        TError,
        {data: User},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a user
 */
export const showUserById = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.get(
      `http://localhost:3000/users/${userId}`,options
    );
  }


export const getShowUserByIdQueryKey = (userId: string,) => {
    return [`http://localhost:3000/users/${userId}`] as const;
    }

    
export const getShowUserByIdQueryOptions = <TData = Awaited<ReturnType<typeof showUserById>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getShowUserByIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof showUserById>>> = ({ signal }) => showUserById(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData> & { queryKey: QueryKey }
}

export type ShowUserByIdQueryResult = NonNullable<Awaited<ReturnType<typeof showUserById>>>
export type ShowUserByIdQueryError = AxiosError<unknown>

/**
 * @summary Get a user
 */
export const useShowUserById = <TData = Awaited<ReturnType<typeof showUserById>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getShowUserByIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a user
 */
export const updateUserById = (
    userId: string,
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.put(
      `http://localhost:3000/users/${userId}`,
      user,options
    );
  }



export const getUpdateUserByIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserById>>, TError,{userId: string;data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserById>>, TError,{userId: string;data: User}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserById>>, {userId: string;data: User}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateUserById(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserByIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserById>>>
    export type UpdateUserByIdMutationBody = User
    export type UpdateUserByIdMutationError = AxiosError<unknown>

    /**
 * @summary Update a user
 */
export const useUpdateUserById = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserById>>, TError,{userId: string;data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateUserById>>,
        TError,
        {userId: string;data: User},
        TContext
      > => {

      const mutationOptions = getUpdateUserByIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a user
 */
export const deleteUserById = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `http://localhost:3000/users/${userId}`,options
    );
  }



export const getDeleteUserByIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserById>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserById>>, TError,{userId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserById>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  deleteUserById(userId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserById>>>
    
    export type DeleteUserByIdMutationError = AxiosError<unknown>

    /**
 * @summary Delete a user
 */
export const useDeleteUserById = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserById>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserById>>,
        TError,
        {userId: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserByIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
