/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * User API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  User
} from './users.schemas'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



/**
 * @summary Get all users
 */
export const getUsers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User[]>> => {
    
    return axios.get(
      `http://localhost:3000/users`,options
    );
  }


export const getGetUsersQueryKey = () => {
    return [`http://localhost:3000/users`] as const;
    }

    
export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = AxiosError<unknown>

/**
 * @summary Get all users
 */
export const useGetUsers = <TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new user
 */
export const postUsers = (
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.post(
      `http://localhost:3000/users`,
      user,options
    );
  }



export const getPostUsersMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: User}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = User
    export type PostUsersMutationError = AxiosError<unknown>

    /**
 * @summary Create a new user
 */
export const usePostUsers = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsers>>,
        TError,
        {data: User},
        TContext
      > => {

      const mutationOptions = getPostUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a user
 */
export const getUsersUserId = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.get(
      `http://localhost:3000/users/${userId}`,options
    );
  }


export const getGetUsersUserIdQueryKey = (userId: number,) => {
    return [`http://localhost:3000/users/${userId}`] as const;
    }

    
export const getGetUsersUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({ signal }) => getUsersUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserId>>>
export type GetUsersUserIdQueryError = AxiosError<unknown>

/**
 * @summary Get a user
 */
export const useGetUsersUserId = <TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(
 userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a user
 */
export const putUsersUserId = (
    userId: number,
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.put(
      `http://localhost:3000/users/${userId}`,
      user,options
    );
  }



export const getPutUsersUserIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: number;data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: number;data: User}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersUserId>>, {userId: number;data: User}> = (props) => {
          const {userId,data} = props ?? {};

          return  putUsersUserId(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersUserId>>>
    export type PutUsersUserIdMutationBody = User
    export type PutUsersUserIdMutationError = AxiosError<unknown>

    /**
 * @summary Update a user
 */
export const usePutUsersUserId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: number;data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putUsersUserId>>,
        TError,
        {userId: number;data: User},
        TContext
      > => {

      const mutationOptions = getPutUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a user
 */
export const deleteUsersUserId = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `http://localhost:3000/users/${userId}`,options
    );
  }



export const getDeleteUsersUserIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserId>>, TError,{userId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserId>>, TError,{userId: number}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUsersUserId>>, {userId: number}> = (props) => {
          const {userId} = props ?? {};

          return  deleteUsersUserId(userId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersUserId>>>
    
    export type DeleteUsersUserIdMutationError = AxiosError<unknown>

    /**
 * @summary Delete a user
 */
export const useDeleteUsersUserId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserId>>, TError,{userId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUsersUserId>>,
        TError,
        {userId: number},
        TContext
      > => {

      const mutationOptions = getDeleteUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
